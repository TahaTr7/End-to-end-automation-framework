<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- 2017 Williams-Sonoma Inc. Checkstyle Rules (Checkstyle 7.4)

* Initially derived from sun/oracle Java checks.
* Added various best practices
* Added more checks for WSI (2010 and earlier - dstephens)
* Revised against checkstyle 7.4 (Early 2017 - dstephens)

Checks are introduced in alphabetical order within the check categories
of the checkstyle documentation. The order of those categories is somewhat
subjective from basic structural guidelines to more nuanced things.

AGGRESSIVE VERSION - JAVADOC STYLE IS ENABLED, WITH INFO FOR PARAGRAPHS.
-->
<module name="Checker">
  <property name="charset" value="UTF-8"/>
  <property name="severity" value="warning"/>

  <property name="fileExtensions" value="java, properties"/>

  <!-- Provide an (ugly and obvious) means to disable rules under certain
       circumstances. -->
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="STYLE disable rule: ([\w\|]+)"/>
    <property name="onCommentFormat" value="STYLE enable rule: ([\w\|]+)"/>
    <property name="checkFormat" value="$1"/>
  </module>

  <!-- CATEGORY: WHITESPACE -->

  <!-- Don't allow TAB characters at all -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true"/>
  </module>

  <!-- CATEGORY: MISCELLANEOUS -->

  <!-- Good style to support many tools -->
  <!-- Currently causes a LOT of noise, disabling -->
  <!-- <module name="NewlineAtEndOfFile"/> Added 2017-01-04 - DS -->

  <!-- Sanity check property files -->
  <module name="UniqueProperties"/><!-- Added 2017-01-04 - DS -->

  <!-- CATEGORY: JAVADOC COMMENTS -->

  <!-- Require package documentation (using package-info.java) -->
  <module name="JavadocPackage"/>

  <module name="TreeWalker">
    <!-- CATEGORY: WHITESPACE -->
    <!-- Prohibit errant spaces for empty for iterators/initializers -->
    <module name="EmptyForInitializerPad"/><!-- Added 2017-01-04 - DS -->
    <module name="EmptyForIteratorPad"/><!-- Added 2017-01-04 - DS -->

    <!-- EmptyLineSeparator - Not using since it DEMANDS whitespace -->

    <!-- Verify commonly accepted conventions on whitespace in generics -->
    <module name="GenericWhitespace"/>

    <!-- Keep method identifier with its parenthesis -->
    <module name="MethodParamPad"/><!-- Added 2017-01-04 - DS -->

    <!-- Prevent wrapping of package definitions and imports -->
    <module name="NoLineWrap"/><!-- Added 2017-01-04 - DS -->

    <!-- Standard whitespace rules -->
    <module name="NoWhitespaceAfter"/>
    <module name="NoWhitespaceBefore"/>

    <module name="OperatorWrap"/>
    
    <module name="ParenPad"/>
    
    <!-- Standard preference for DOT and COMMA (end of line) -->
    <module name="SeparatorWrap"><!-- Added 2017-01-04 - DS -->
      <property name="tokens" value="DOT"/>
      <property name="option" value="nl"/>
    </module>
    <module name="SeparatorWrap"><!-- Added 2017-01-04 - DS -->
      <property name="tokens" value="COMMA"/>
      <property name="option" value="eol"/>
    </module>

    <!-- SingleSpaceSeparator - Not using since it can't validate alignment -->

    <!-- Apply standard rules to typecasts -->
    <module name="TypecastParenPad"/><!-- Added 2017-01-04 - DS -->

    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround">
      <property name="tokens" value="ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV,DIV_ASSIGN,EQUAL,GE,GT,LAND,LCURLY,LE,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,LT,MINUS,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,RCURLY,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN,TYPE_EXTENSION_AND"/>
    </module>

    <!-- CATEGORY: SIZE VIOLATIONS -->

    <!-- AnonInnerLength - Interesting, but not now -->
    <!-- ExecutableStatementCount - Seems too subjective -->
    <!-- FileLength - Too subjective -->

    <!-- Limit lines to 160 (exempt stuff that can't break lines) -->
    <module name="LineLength">
      <property name="ignorePattern" value="^(.*@version [$]Id.*|.*@see .*|import [^;]*;|package [^;]*;)$"/>
      <property name="max" value="160"/>
    </module>

    <!-- MethodCount - Too subjective -->

    <!-- Limit length of methods -->
    <module name="MethodLength">
      <property name="countEmpty" value="false"/>
    </module>
    
    <!-- Do not permit multiple outer types in a single file -->
    <module name="OuterTypeNumber"/>
    
    <!-- ParameterNumber - Too subjective (if enabled, ignore overrides) -->

    <!-- CATEGORY: REGEXP -->
    <!-- Interesting potential, ignore for now -->

    <!-- CATEGORY: NAMING CONVENTIONS -->

    <!-- AbbreviationAsWordInName - Has promise, skipping for now -->

    <!-- Require classes that say they are Abstract actually ARE abstract. -->
    <module name="AbstractClassName"><!-- Added 2017-01-04 - DS -->
      <property name="ignoreName" value="true"/>
    </module>
    <!-- Consider trying to keep abstract classes duly named, but at
	 present this isn't really consistent with actual code, so
	 limiting to notification for now.

         DISABLED UNTIL WE FIGURE OUT WHAT OUR EXPECTATIONS ARE.
    <module name="AbstractClassName">  Added 2017-01-04 DS
      <property name="severity" value="info"/>
      <property name="ignoreModifier" value="true"/>
    </module> -->

    <!-- Encourage decent names, permit things like se for SessionException -->
    <module name="CatchParameterName"><!-- Added 2017-01-06 - DS -->
      <property name="format" value="^(e|t|ex|[a-z]e|[a-z][a-z][a-zA-Z]+)$"/>
    </module>

    <module name="ClassTypeParameterName"><!-- Added 2017-01-04 - DS -->
      <property name="format" value="^[A-Z]+$"/>
    </module>
    <module name="ConstantName"/>
    <module name="InterfaceTypeParameterName"><!-- Added 2017-01-04 - DS -->
      <property name="format" value="^[A-Z]+$"/>
    </module>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName"/>
    <module name="MethodTypeParameterName"><!-- Added 2017-01-04 - DS -->
      <property name="format" value="^[A-Z]+$"/>
    </module>
    <module name="PackageName"/>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="TypeName"/>

    <!-- CATEGORY: MODIFIERS -->

    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- CATEGORY: MISCELLANEOUS -->

    <!-- ArrayTypeStyle - Favor java style over C style -->
    <module name="ArrayTypeStyle"/><!-- Added 2017-01-06 - DS -->

    <!-- AvoidEscapedUnicodeCharacters - Don't trust current editor/setups -->

    <!-- Keep comments lined up with their code -->
    <module name="CommentsIndentation"/><!-- Added 2017-01-04 - DS -->

    <!-- DescendantToken - Powerful but not useful right now -->

    <!-- Required to support SuppressionCommentFilter -->
    <module name="FileContentsHolder"/>

    <!-- FinalParameters - We prefer to avoid unnecessary finals -->
    <!-- Indentation - This will be great in the future, maybe -->

    <!-- Ensure filename and class match -->
    <module name="OuterTypeFilename"/><!-- Added 2017-01-04 - DS -->

    <!-- TodoComment - Not including since we want zero warnings always -->
    <!-- TrailingComment - Not consistent with WSI style -->
    <!-- Translation - We don't yet have i18n -->
    <!-- UncommentedMain  - Interesting idea, may revisit later -->

    <module name="UpperEll"/>

    <!-- CATEGORY: METRICS -->
    <!-- A bit too subjective for now -->

    <!-- CATEGORY: JAVADOC COMMENTS -->

    <!-- AtClauseOrder - Has potential, requires setup -->

    <module name="JavadocMethod">
      <property name="validateThrows" value="true"/><!-- Added 2017-01-06 - DS -->
    </module>

    <!-- Worth considering, likely high impact at first.
         AGGRESSIVE INFO ONLY.
    -->
    <module name="JavadocParagraph"><!-- Added 2016-01-10 - DS -->
      <property name="severity" value="info"/>
    </module>
    <module name="JavadocType" />
    <!-- Enforce javadoc style - high impact but enabled for aggressive -->
    <module name="JavadocStyle"/><!-- Added 2017-01-06 - DS  -->
    <!-- JavadocTagContinuationIndentation - Maybe later -->
    <module name="JavadocType"/>
    <module name="JavadocVariable">
      <property name="scope" value="public"/><!-- TODO - Make protected -->
    </module>
    <!-- Prohibit tags without descriptions -->
    <module name="NonEmptyAtclauseDescription"/><!-- Added 2017-01-04 - DS -->
    <module name="SingleLineJavadoc"><!-- Added 2017-01-04 - DS -->
      <property name="ignoredTags" value="@inheritDoc"/>
      <property name="ignoreInlineTags" value="false"/>
    </module>
    <!-- SummaryJavadoc - Has future potential ("this method" etc) -->
    <!-- WriteTag - Not yet required -->

    <!-- CATEGORY: IMPORTS -->
    
    <module name="AvoidStarImport"/>
    <!-- AvoidStaticImport - Not consistent with WSI Style -->
    <!-- CustomImportOrder - Great potential for future use -->
    <module name="IllegalImport"/>
    <!-- ImportControl - Maybe use in future -->
    <!-- ImportOrder - Probably too opinionated -->
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>

    <!-- CATEGORY: HEADERS -->
    <!-- No need yet -->

    <!-- CATEGORY: CODING -->
    <module name="ArrayTrailingComma"/><!-- Added 2017-01-06 - DS -->
    
    <!-- AvoidInlineConditionals - Not consistent with WSI style -->

    <module name="CovariantEquals"/>
    
    <!-- DeclarationOrder - Too subjective -->

    <module name="DefaultComesLast"/> <!-- Added 2007-03-28 -->
    <module name="EmptyStatement"/>

    <!-- EqualsAvoidNull - Maybe - I personally don't like this -->

    <module name="EqualsHashCode"/>
    <module name="ExplicitInitialization"/>
    <module name="FallThrough"> <!-- Added 2007-03-28 -->
      <property name="checkLastCaseGroup" value="true"/>
    </module>
    <!-- FinalLocalVariable - Far too irritating -->
    
    <!-- Enough of a problem it's worth catching -->
    <module name="HiddenField">
      <property name="ignoreConstructorParameter" value="true"/>
      <property name="ignoreSetter" value="true"/>
      <property name="setterCanReturnItsClass" value="true"/><!-- Added 2017-01-04 - DS -->
    </module>

    <!-- IllegalCatch - So tempting, but useful occasionally -->

    <!-- don't create new instances of Boolean,
         use Boolean.TRUE/FALSE or Boolean.valueOf() instead -->
    <module name="IllegalInstantiation">
      <property name="classes" value="java.lang.Boolean"/>
    </module>

    <!-- IllegalThrows - So tempting, but useful occasionally -->
    <!-- IllegalToken - Not a problem so far -->

    <!-- Prohbit leading zeroes on non-hex numeric literals (octal problem) -->
    <module name="IllegalTokenText"><!-- Added 2017-01-04 - DS -->
      <property name="tokens" value="NUM_INT,NUM_LONG"/>
      <property name="format" value="^0[^lx]"/>
      <property name="ignoreCase" value="true"/>
    </module>

    
    <!-- Hurts but it seems like a good way to stop bad habits.-->
    <!-- Removed java.util.Hashtable from illegal list thanks to JNDI
         requiring it rather than using Map or something (grr) -->
    <module name="IllegalType">
      <property name="illegalClassNames" value="java.util.GregorianCalendar,java.util.HashSet,java.util.HashMap,java.util.LinkedHashMap,java.util.LinkedHashSet,java.util.TreeSet,java.util.TreeMap,java.util.Vector"/>
    </module>

    <!-- avoid inner assignments -->
    <module name="InnerAssignment"/>
    
    <!-- MagicNumber - Tempting, but probably too annoying -->
    <!-- MissingCtor - Overly protective -->

    <module name="MissingSwitchDefault"/>

    <!-- ModifiedControlVariable - Actually useful sometimes, so no -->
    <!-- MultipleStringLiterals - Tempting, maybe add in future -->

    <!-- MultipleVariableDeclarations - Would like to turn this on -->
    <!-- NestedForDepth - Overly protective (but maybe future w/ high lim) -->
    <!-- NestedIfDepth - Overly protective (but maybe future w/ high lim) -->
    <!-- NestedTryDepth - Overly protective (but maybe future w/ high lim) -->
    <!-- NoClone - Tempting, clone is painful -->

    <!-- This is dangerous enough to block -->
    <module name="NoFinalizer"/><!-- Added 2017-01-04 - DS -->
    
    <module name="OneStatementPerLine"/><!-- Added 2017-01-04 - DS -->

    <!-- OverloadMethodsDeclarationOrder - Very tempting, may need cleanup -->
    <module name="PackageDeclaration"/>
    
    <!-- ParameterAssignment - Not consistent with WSI style -->
    <!-- RequireThis - Seems a bit fraught with peril, consider later? -->
    <!-- ReturnCount - Not consistent with WSI style -->

    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>

    <!-- StringLiteralEquality - Too sensitive, this can be valid w/ intern -->
    <module name="SuperClone"/>
    <!-- SuperFinalize - DISABLED 2017-01-04 due to NoFinalizer -->
    <!-- UnnecessaryParentheses - Don't want to discourage () for clarity -->
    <!-- VariableDeclarationUsageDistance - Interesting for future -->

    <!-- CATEGORY: CLASS DESIGN -->

    <!-- DesignForExtension - Almost certainly too twitchy (essentially requires suppression) -->

    <module name="FinalClass"/>
    <module name="HideUtilityClassConstructor"/>

    <!-- InnerTypeLast - Inconsistent with WSI style -->

    <!-- Probably for the best, watch out for problems though -->
    <module name="InterfaceIsType"/><!-- Added 2017-01-04 - DS -->
    <module name="MutableException"/><!-- Added 2017-01-04 - DS -->
    <module name="OneTopLevelClass"/><!-- Added 2017-01-04 - DS -->
    <!-- ThrowsCount - Worth trying with 4 or so -->

    <module name="VisibilityModifier">
      <!-- 2007-03-28 - Allow protected members, used sparingly -->
      <property name="protectedAllowed" value="true"/>
    </module>

    <!-- CATEGORY: BLOCK CHECKS -->

    <module name="AvoidNestedBlocks"><!-- Added 2017-01-04 - DS -->
      <property name="allowInSwitchCase" value="true"/>
    </module>
    
    <!-- don't allow empty blocks (in particular catch blocks) -->
    <module name="EmptyBlock">
      <property name="option" value="text"/>
    </module>

    <!-- Require catch blocks to contain SOMETHING -->
    <module name="EmptyCatchBlock"/><!-- Added 2017-01-06 - DS -->

    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>

    <!-- CATEGORY: ANNOTATIONS -->

    <!-- AnnotationLocation - May have some issues, revisit -->

    <!-- Keep annotation use consistent -->
    <module name="AnnotationUseStyle"/>

    <!-- Ensure consistency in marking of deprecation -->
    <module name="MissingDeprecated"/>

    <!-- Ensure override annotations are present when @inheritDoc is. -->
    <module name="MissingOverride"/>

    <!-- Ensure package annotations are in the right place -->
    <module name="PackageAnnotation"/>

    <!-- SuppressWarnings - Don't want this to be too easy -->
    <!-- SuppressWarningsHolder - Don't want this to be too easy -->
  </module>
</module>
